#!/usr/bin/perl

use strict;
use MBclient;
use Data::Dumper;

my $debug = 0;

my %kscale = qw(
	1	0.01
	2	0.1
	3	1
	4	10
	5	100
	6	1000
	7	10000
);

my %escale = qw(
	3       0.001
	4       0.01
	5       0.1
	6       1
	7       10
);


my $config = 0;

my $node = $ARGV[0];
my $host = $ARGV[0];

my $response;
my $first = 1;

if ($0 =~ /(?:|.*\/)modbus_kwh_([^_]+)$/) {
        $host  = $1;
} elsif (!defined($host)) {
        print "No hostname configured\n";
        exit 1;
}
$node = $host unless $node;

my $m = MBclient->new();
# define server target
$m->host($host);
$m->unit_id(1);

my $words;
my $name = getName(30 * 256 + 0);

$words = $m->read_holding_registers(7704, 3);
my $slaveCount = @$words[0];
# printf "slaveCount %d\n", $slaveCount;

my $singlephaseMap = (@$words[1] << 16) | @$words[2];
printf "singlephaseMap %X\n", $singlephaseMap if $debug;

if ($config) {
	printf "host_name %s\n", $node;
	printf "graph_title %s\n", $name;
	printf "graph_args --base 1000 -l 0\n";
	printf "graph_vlabel KW\n";
	printf "graph_category sensors\n";
	printf "graph_info readings from DBs %s\n", $host;
}

my @phases;

foreach my $slave (1..$slaveCount) {
	if (($singlephaseMap >> ($slave - 1)) & 0x1) {
		$phases[$slave] = 1;
	} else {
		$phases[$slave] = 3;
	}
	getSlaveInstant2($slave);
}

$m->close();
exit 0;

sub getName
{
	my $offset = shift;
	my $words = $m->read_holding_registers($offset, 7);
	my $name = '';
	foreach my $word (@$words) {
		my $lo = $word & 0x00ff;
		my $hi = ($word >> 8) & 0xffff;
		if ($hi == 0) { last; } else { $name .= chr($hi); }
		if ($lo == 0) { last; } else { $name .= chr($lo); }
	}
	$name =~ s/<//g;
	$name =~ s/>//g;
	$name =~ s/^ +//;
	$name;
}

sub getSlaveInstant2
{
	my $slave = shift;

	$m->unit_id($slave + 1);

	my $phase;
	my @label;
	my $escale;
	
	if ($config) {
		foreach $phase (1..(($phases[$slave] == 3) ? 1 : 3)) {
			$label[$phase] = getName(7170 + ($phase - 1) * 7);
			$label[$phase] = 'No name' unless $label[$phase];
			printf "unit%02dkwh%d.label %s\n", $slave, $phase, $label[$phase];
			printf "unit%02dkwh%d.info %s\n", $slave, $phase, "Power";
			printf "unit%02dkwh%d.type %s\n", $slave, $phase, "COUNTER";
			if ($first) {
				printf "unit%02dkwh%d.draw %s\n", $slave, $phase, "AREA";
				$first = 0;
			} else {
				printf "unit%02dkwh%d.draw %s\n", $slave, $phase, "STACK";
			}
		}
		return;
	}

	my (@amps, @kwh, $ki, @Amps, @Kwh);
	if ($phases[$slave] == 1) {
		$words = $m->read_holding_registers(7936, 41);
                $kwh[0] = @$words[0] * 65536 + @$words[1];
                $kwh[1] = @$words[2] * 65536 + @$words[3];
                $kwh[2] = @$words[4] * 65536 + @$words[5];
		@amps = @$words[27..29];
		$ki = @$words[35];
                $escale = @$words[33];
	} elsif ($phases[$slave] == 3) {
		$words = $m->read_holding_registers(7680, 58);
		$kwh[0] = @$words[0] * 65536 + @$words[1];
		@amps = @$words[8..10];
		$ki = @$words[53];
                $escale = @$words[57];
	} else {
		# print STDERR "Slave $slave - strange number of phases $phases[$slave]\n";
		return;
	}
	# print "Slave $slave - strange ki $ki\n" unless $kscale{$ki};
	@Amps = map { $_ * $kscale{$ki} } @amps;
	@Kwh = map { $_ * $escale{$escale} } @kwh;

	foreach $phase (0 .. $#Kwh) {
		printf "unit%02dkwh%d.value %.0f\n", $slave, $phase, $Kwh[$phase - 1] * 3600;
	}
}

__DATA__

